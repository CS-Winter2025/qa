@model IEnumerable<CourseProject.Models.EventSchedule>

@{
    ViewData["Title"] = "Calendar - " + (ViewData["EmployeeName"] ?? "All Events");
}

<script src="https://cdn.dhtmlx.com/scheduler/edge/dhtmlxscheduler.js"></script>
<link href="https://cdn.dhtmlx.com/scheduler/edge/dhtmlxscheduler.css"
      rel="stylesheet" type="text/css" charset="utf-8">

<h2>Calendar for: @ViewData["EmployeeName"]</h2>

<div id="scheduler_here" class="dhx_cal_container" style='width:100%; height:100vh;'>
    <div class="dhx_cal_navline">
        <div class="dhx_cal_prev_button">&nbsp;</div>
        <div class="dhx_cal_next_button">&nbsp;</div>
        <div class="dhx_cal_today_button"></div>
        <div class="dhx_cal_date"></div>
        <div class="dhx_cal_tab" name="day_tab"></div>
        <div class="dhx_cal_tab" name="week_tab"></div>
        <div class="dhx_cal_tab" name="month_tab"></div>
    </div>
    <div class="dhx_cal_header"></div>
    <div class="dhx_cal_data"></div>
</div>
<script>
    scheduler.plugins({
        recurring: true
    });
    scheduler.config.date_format = "%Y-%m-%d %H:%i";
    scheduler.init("scheduler_here", new Date(2019, 0, 20), "week");

    scheduler.config.lightbox.sections = [
        // { name: "description", height: 50, map_to: "text", type: "textarea", focus: true },
        // { name: "Service ID", height: 30, map_to: "service_id", type: "textarea" },
        { name: "Service", map_to: "service_id", type: "select", options: scheduler.serverList("services") },
        { name: "Employee IDs", height: 30, map_to: "employee_ids", type: "textarea" },
        { name: "recurring", type: "recurring", map_to: "rrule" },
        { name: "time", height: 72, type: "time", map_to: "auto" }
    ];

    scheduler.attachEvent("onEventAdded", (id, ev, is_new) => {
        let selectedServiceId = ev.service_id; // Adjust the field name based on your API

        // Find the corresponding service label from scheduler's server list
        let serviceList = scheduler.serverList("services");
        let selectedService = serviceList.find(service => service.key == selectedServiceId);

        // Update the description with the service label
        if (selectedService) {
            ev.text = selectedService.label; // Setting the event text
        }

        return true; // Allow event to be saved
    })

    // load data from backend
    scheduler.load("/api/events?employeeId=" + @ViewData["EmployeeID"]);
    // connect backend to scheduler
    var dp = scheduler.createDataProcessor({
        url: "/api/events",
        more: "REST"
    });
    dp.init(scheduler);

    dp.attachEvent("onBeforeDataSending", function (id, state, data) {
        console.log("Data being sent:", data);
        return true;
    });
    // set data exchange mode
    // dp.setTransactionMode("REST");
</script>
